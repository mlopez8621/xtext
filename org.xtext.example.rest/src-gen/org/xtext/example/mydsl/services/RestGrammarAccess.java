/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RestGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApiURLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIGUALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPUNTOCOMATerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEntidadesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntidadesEntidadParserRuleCall_4_0 = (RuleCall)cEntidadesAssignment_4.eContents().get(0);
		private final Assignment cMetodosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMetodosMetodoParserRuleCall_5_0 = (RuleCall)cMetodosAssignment_5.eContents().get(0);
		private final Assignment cTestsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTestsTestParserRuleCall_6_0 = (RuleCall)cTestsAssignment_6.eContents().get(0);
		
		//Model:
		//	'apiURL' IGUAL STRING PUNTOCOMA
		//	entidades+=Entidad+
		//	metodos+=Metodo+
		//	tests+=Test+;
		@Override public ParserRule getRule() { return rule; }
		
		//'apiURL' IGUAL STRING PUNTOCOMA entidades+=Entidad+ metodos+=Metodo+ tests+=Test+
		public Group getGroup() { return cGroup; }
		
		//'apiURL'
		public Keyword getApiURLKeyword_0() { return cApiURLKeyword_0; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_1() { return cIGUALTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_3() { return cPUNTOCOMATerminalRuleCall_3; }
		
		//entidades+=Entidad+
		public Assignment getEntidadesAssignment_4() { return cEntidadesAssignment_4; }
		
		//Entidad
		public RuleCall getEntidadesEntidadParserRuleCall_4_0() { return cEntidadesEntidadParserRuleCall_4_0; }
		
		//metodos+=Metodo+
		public Assignment getMetodosAssignment_5() { return cMetodosAssignment_5; }
		
		//Metodo
		public RuleCall getMetodosMetodoParserRuleCall_5_0() { return cMetodosMetodoParserRuleCall_5_0; }
		
		//tests+=Test+
		public Assignment getTestsAssignment_6() { return cTestsAssignment_6; }
		
		//Test
		public RuleCall getTestsTestParserRuleCall_6_0() { return cTestsTestParserRuleCall_6_0; }
	}
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cServiceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIGUALTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cServiceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cServiceMetodoCrossReference_6_0 = (CrossReference)cServiceAssignment_6.eContents().get(0);
		private final RuleCall cServiceMetodoIDTerminalRuleCall_6_0_1 = (RuleCall)cServiceMetodoCrossReference_6_0.eContents().get(1);
		private final RuleCall cPUNTOCOMATerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cDescriptionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cIGUALTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cSTRINGTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cPUNTOCOMATerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cMappingAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMappingMappingParserRuleCall_12_0 = (RuleCall)cMappingAssignment_12.eContents().get(0);
		private final Assignment cAssertionAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cAssertionAssertionParserRuleCall_13_0 = (RuleCall)cAssertionAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Test:
		//	{Test}
		//	'Test' name=ID '{'
		//	'service' IGUAL service=[Metodo] PUNTOCOMA
		//	'description' IGUAL STRING PUNTOCOMA
		//	mapping=Mapping?
		//	assertion=Assertion
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Test} 'Test' name=ID '{' 'service' IGUAL service=[Metodo] PUNTOCOMA 'description' IGUAL STRING PUNTOCOMA
		//mapping=Mapping? assertion=Assertion '}'
		public Group getGroup() { return cGroup; }
		
		//{Test}
		public Action getTestAction_0() { return cTestAction_0; }
		
		//'Test'
		public Keyword getTestKeyword_1() { return cTestKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'service'
		public Keyword getServiceKeyword_4() { return cServiceKeyword_4; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_5() { return cIGUALTerminalRuleCall_5; }
		
		//service=[Metodo]
		public Assignment getServiceAssignment_6() { return cServiceAssignment_6; }
		
		//[Metodo]
		public CrossReference getServiceMetodoCrossReference_6_0() { return cServiceMetodoCrossReference_6_0; }
		
		//ID
		public RuleCall getServiceMetodoIDTerminalRuleCall_6_0_1() { return cServiceMetodoIDTerminalRuleCall_6_0_1; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_7() { return cPUNTOCOMATerminalRuleCall_7; }
		
		//'description'
		public Keyword getDescriptionKeyword_8() { return cDescriptionKeyword_8; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_9() { return cIGUALTerminalRuleCall_9; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_10() { return cSTRINGTerminalRuleCall_10; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_11() { return cPUNTOCOMATerminalRuleCall_11; }
		
		//mapping=Mapping?
		public Assignment getMappingAssignment_12() { return cMappingAssignment_12; }
		
		//Mapping
		public RuleCall getMappingMappingParserRuleCall_12_0() { return cMappingMappingParserRuleCall_12_0; }
		
		//assertion=Assertion
		public Assignment getAssertionAssignment_13() { return cAssertionAssignment_13; }
		
		//Assertion
		public RuleCall getAssertionAssertionParserRuleCall_13_0() { return cAssertionAssertionParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssertionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssertionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cResponseStatusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIGUALDADTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cPUNTOCOMATerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cAssertResponseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAssertResponseAssertResponseParserRuleCall_7_0 = (RuleCall)cAssertResponseAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Assertion:
		//	{Assertion}
		//	'Assertions' '{'
		//	'response.status' IGUALDAD INT PUNTOCOMA
		//	assertResponse+=AssertResponse*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Assertion} 'Assertions' '{' 'response.status' IGUALDAD INT PUNTOCOMA assertResponse+=AssertResponse* '}'
		public Group getGroup() { return cGroup; }
		
		//{Assertion}
		public Action getAssertionAction_0() { return cAssertionAction_0; }
		
		//'Assertions'
		public Keyword getAssertionsKeyword_1() { return cAssertionsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'response.status'
		public Keyword getResponseStatusKeyword_3() { return cResponseStatusKeyword_3; }
		
		//IGUALDAD
		public RuleCall getIGUALDADTerminalRuleCall_4() { return cIGUALDADTerminalRuleCall_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_6() { return cPUNTOCOMATerminalRuleCall_6; }
		
		//assertResponse+=AssertResponse*
		public Assignment getAssertResponseAssignment_7() { return cAssertResponseAssignment_7; }
		
		//AssertResponse
		public RuleCall getAssertResponseAssertResponseParserRuleCall_7_0() { return cAssertResponseAssertResponseParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AssertResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.AssertResponse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssertResponseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cResponseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cComparadorParserRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cGroup_2_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_0_1_0 = (RuleCall)cAlternatives_2_0_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_0_1_1 = (RuleCall)cAlternatives_2_0_1.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cComparacionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cComparacionComparacionParserRuleCall_2_1_1_0 = (RuleCall)cComparacionAssignment_2_1_1.eContents().get(0);
		private final RuleCall cPUNTOCOMATerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AssertResponse:
		//	{AssertResponse}
		//	'response' (Comparador (INT | STRING) | '->' comparacion=Comparacion) PUNTOCOMA;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssertResponse} 'response' (Comparador (INT | STRING) | '->' comparacion=Comparacion) PUNTOCOMA
		public Group getGroup() { return cGroup; }
		
		//{AssertResponse}
		public Action getAssertResponseAction_0() { return cAssertResponseAction_0; }
		
		//'response'
		public Keyword getResponseKeyword_1() { return cResponseKeyword_1; }
		
		//Comparador (INT | STRING) | '->' comparacion=Comparacion
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Comparador (INT | STRING)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//Comparador
		public RuleCall getComparadorParserRuleCall_2_0_0() { return cComparadorParserRuleCall_2_0_0; }
		
		//INT | STRING
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_1_0() { return cINTTerminalRuleCall_2_0_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0_1_1() { return cSTRINGTerminalRuleCall_2_0_1_1; }
		
		//'->' comparacion=Comparacion
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1_0() { return cHyphenMinusGreaterThanSignKeyword_2_1_0; }
		
		//comparacion=Comparacion
		public Assignment getComparacionAssignment_2_1_1() { return cComparacionAssignment_2_1_1; }
		
		//Comparacion
		public RuleCall getComparacionComparacionParserRuleCall_2_1_1_0() { return cComparacionComparacionParserRuleCall_2_1_1_0; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_3() { return cPUNTOCOMATerminalRuleCall_3; }
	}
	public class ComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Comparacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComparacionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntidadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntidadEntidadCrossReference_1_0 = (CrossReference)cEntidadAssignment_1.eContents().get(0);
		private final RuleCall cEntidadEntidadIDTerminalRuleCall_1_0_1 = (RuleCall)cEntidadEntidadCrossReference_1_0.eContents().get(1);
		private final RuleCall cPUNTOTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cAtributoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAtributoAtributoCrossReference_3_0 = (CrossReference)cAtributoAssignment_3.eContents().get(0);
		private final RuleCall cAtributoAtributoIDTerminalRuleCall_3_0_1 = (RuleCall)cAtributoAtributoCrossReference_3_0.eContents().get(1);
		private final RuleCall cComparadorParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cAlternatives_5.eContents().get(2);
		private final Keyword cParameterKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cMetodoAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cMetodoMetodoCrossReference_5_2_1_0 = (CrossReference)cMetodoAssignment_5_2_1.eContents().get(0);
		private final RuleCall cMetodoMetodoIDTerminalRuleCall_5_2_1_0_1 = (RuleCall)cMetodoMetodoCrossReference_5_2_1_0.eContents().get(1);
		private final RuleCall cPUNTOTerminalRuleCall_5_2_2 = (RuleCall)cGroup_5_2.eContents().get(2);
		private final Assignment cParamAssignment_5_2_3 = (Assignment)cGroup_5_2.eContents().get(3);
		private final CrossReference cParamPathParamCrossReference_5_2_3_0 = (CrossReference)cParamAssignment_5_2_3.eContents().get(0);
		private final RuleCall cParamPathParamIDTerminalRuleCall_5_2_3_0_1 = (RuleCall)cParamPathParamCrossReference_5_2_3_0.eContents().get(1);
		
		//Comparacion:
		//	{Comparacion} entidad=[Entidad] PUNTO atributo=[Atributo] Comparador (INT | STRING | 'parameter.' metodo=[Metodo]
		//	PUNTO param=[PathParam]);
		@Override public ParserRule getRule() { return rule; }
		
		//{Comparacion} entidad=[Entidad] PUNTO atributo=[Atributo] Comparador (INT | STRING | 'parameter.' metodo=[Metodo] PUNTO
		//param=[PathParam])
		public Group getGroup() { return cGroup; }
		
		//{Comparacion}
		public Action getComparacionAction_0() { return cComparacionAction_0; }
		
		//entidad=[Entidad]
		public Assignment getEntidadAssignment_1() { return cEntidadAssignment_1; }
		
		//[Entidad]
		public CrossReference getEntidadEntidadCrossReference_1_0() { return cEntidadEntidadCrossReference_1_0; }
		
		//ID
		public RuleCall getEntidadEntidadIDTerminalRuleCall_1_0_1() { return cEntidadEntidadIDTerminalRuleCall_1_0_1; }
		
		//PUNTO
		public RuleCall getPUNTOTerminalRuleCall_2() { return cPUNTOTerminalRuleCall_2; }
		
		//atributo=[Atributo]
		public Assignment getAtributoAssignment_3() { return cAtributoAssignment_3; }
		
		//[Atributo]
		public CrossReference getAtributoAtributoCrossReference_3_0() { return cAtributoAtributoCrossReference_3_0; }
		
		//ID
		public RuleCall getAtributoAtributoIDTerminalRuleCall_3_0_1() { return cAtributoAtributoIDTerminalRuleCall_3_0_1; }
		
		//Comparador
		public RuleCall getComparadorParserRuleCall_4() { return cComparadorParserRuleCall_4; }
		
		//INT | STRING | 'parameter.' metodo=[Metodo] PUNTO param=[PathParam]
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_0() { return cINTTerminalRuleCall_5_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5_1() { return cSTRINGTerminalRuleCall_5_1; }
		
		//'parameter.' metodo=[Metodo] PUNTO param=[PathParam]
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'parameter.'
		public Keyword getParameterKeyword_5_2_0() { return cParameterKeyword_5_2_0; }
		
		//metodo=[Metodo]
		public Assignment getMetodoAssignment_5_2_1() { return cMetodoAssignment_5_2_1; }
		
		//[Metodo]
		public CrossReference getMetodoMetodoCrossReference_5_2_1_0() { return cMetodoMetodoCrossReference_5_2_1_0; }
		
		//ID
		public RuleCall getMetodoMetodoIDTerminalRuleCall_5_2_1_0_1() { return cMetodoMetodoIDTerminalRuleCall_5_2_1_0_1; }
		
		//PUNTO
		public RuleCall getPUNTOTerminalRuleCall_5_2_2() { return cPUNTOTerminalRuleCall_5_2_2; }
		
		//param=[PathParam]
		public Assignment getParamAssignment_5_2_3() { return cParamAssignment_5_2_3; }
		
		//[PathParam]
		public CrossReference getParamPathParamCrossReference_5_2_3_0() { return cParamPathParamCrossReference_5_2_3_0; }
		
		//ID
		public RuleCall getParamPathParamIDTerminalRuleCall_5_2_3_0_1() { return cParamPathParamIDTerminalRuleCall_5_2_3_0_1; }
	}
	public class ComparadorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Comparador");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIGUALDADTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMAYORTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMENORTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMAYORIGUALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMENORIGUALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Comparador:
		//	IGUALDAD | MAYOR | MENOR | MAYORIGUAL | MENORIGUAL;
		@Override public ParserRule getRule() { return rule; }
		
		//IGUALDAD | MAYOR | MENOR | MAYORIGUAL | MENORIGUAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IGUALDAD
		public RuleCall getIGUALDADTerminalRuleCall_0() { return cIGUALDADTerminalRuleCall_0; }
		
		//MAYOR
		public RuleCall getMAYORTerminalRuleCall_1() { return cMAYORTerminalRuleCall_1; }
		
		//MENOR
		public RuleCall getMENORTerminalRuleCall_2() { return cMENORTerminalRuleCall_2; }
		
		//MAYORIGUAL
		public RuleCall getMAYORIGUALTerminalRuleCall_3() { return cMAYORIGUALTerminalRuleCall_3; }
		
		//MENORIGUAL
		public RuleCall getMENORIGUALTerminalRuleCall_4() { return cMENORIGUALTerminalRuleCall_4; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMappingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMapsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMapsMapParserRuleCall_3_0 = (RuleCall)cMapsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mapping:
		//	{Mapping}
		//	'Mapping' '['
		//	maps+=Map+
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mapping} 'Mapping' '[' maps+=Map+ ']'
		public Group getGroup() { return cGroup; }
		
		//{Mapping}
		public Action getMappingAction_0() { return cMappingAction_0; }
		
		//'Mapping'
		public Keyword getMappingKeyword_1() { return cMappingKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//maps+=Map+
		public Assignment getMapsAssignment_3() { return cMapsAssignment_3; }
		
		//Map
		public RuleCall getMapsMapParserRuleCall_3_0() { return cMapsMapParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParameterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIGUALTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameMapNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final RuleCall cCOMATerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cValueKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cIGUALTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final RuleCall cSTRINGTerminalRuleCall_8_0 = (RuleCall)cAlternatives_8.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_8_1 = (RuleCall)cAlternatives_8.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cAlternatives_8.eContents().get(2);
		private final Keyword cRequestKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8_2_1 = (Keyword)cGroup_8_2.eContents().get(1);
		private final Assignment cEntidadMapAssignment_8_2_2 = (Assignment)cGroup_8_2.eContents().get(2);
		private final CrossReference cEntidadMapEntidadCrossReference_8_2_2_0 = (CrossReference)cEntidadMapAssignment_8_2_2.eContents().get(0);
		private final RuleCall cEntidadMapEntidadIDTerminalRuleCall_8_2_2_0_1 = (RuleCall)cEntidadMapEntidadCrossReference_8_2_2_0.eContents().get(1);
		private final RuleCall cPUNTOTerminalRuleCall_8_2_3 = (RuleCall)cGroup_8_2.eContents().get(3);
		private final Assignment cAtributoAssignment_8_2_4 = (Assignment)cGroup_8_2.eContents().get(4);
		private final CrossReference cAtributoAtributoCrossReference_8_2_4_0 = (CrossReference)cAtributoAssignment_8_2_4.eContents().get(0);
		private final RuleCall cAtributoAtributoIDTerminalRuleCall_8_2_4_0_1 = (RuleCall)cAtributoAtributoCrossReference_8_2_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Map:
		//	{Map}
		//	'{' 'parameter' IGUAL name=MapName COMA 'value' IGUAL (STRING | INT | 'request' '->' entidadMap=[Entidad] PUNTO
		//	atributo=[Atributo]) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Map} '{' 'parameter' IGUAL name=MapName COMA 'value' IGUAL (STRING | INT | 'request' '->' entidadMap=[Entidad] PUNTO
		//atributo=[Atributo]) '}'
		public Group getGroup() { return cGroup; }
		
		//{Map}
		public Action getMapAction_0() { return cMapAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'parameter'
		public Keyword getParameterKeyword_2() { return cParameterKeyword_2; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_3() { return cIGUALTerminalRuleCall_3; }
		
		//name=MapName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//MapName
		public RuleCall getNameMapNameParserRuleCall_4_0() { return cNameMapNameParserRuleCall_4_0; }
		
		//COMA
		public RuleCall getCOMATerminalRuleCall_5() { return cCOMATerminalRuleCall_5; }
		
		//'value'
		public Keyword getValueKeyword_6() { return cValueKeyword_6; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_7() { return cIGUALTerminalRuleCall_7; }
		
		//STRING | INT | 'request' '->' entidadMap=[Entidad] PUNTO atributo=[Atributo]
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_8_0() { return cSTRINGTerminalRuleCall_8_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_8_1() { return cINTTerminalRuleCall_8_1; }
		
		//'request' '->' entidadMap=[Entidad] PUNTO atributo=[Atributo]
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//'request'
		public Keyword getRequestKeyword_8_2_0() { return cRequestKeyword_8_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_8_2_1() { return cHyphenMinusGreaterThanSignKeyword_8_2_1; }
		
		//entidadMap=[Entidad]
		public Assignment getEntidadMapAssignment_8_2_2() { return cEntidadMapAssignment_8_2_2; }
		
		//[Entidad]
		public CrossReference getEntidadMapEntidadCrossReference_8_2_2_0() { return cEntidadMapEntidadCrossReference_8_2_2_0; }
		
		//ID
		public RuleCall getEntidadMapEntidadIDTerminalRuleCall_8_2_2_0_1() { return cEntidadMapEntidadIDTerminalRuleCall_8_2_2_0_1; }
		
		//PUNTO
		public RuleCall getPUNTOTerminalRuleCall_8_2_3() { return cPUNTOTerminalRuleCall_8_2_3; }
		
		//atributo=[Atributo]
		public Assignment getAtributoAssignment_8_2_4() { return cAtributoAssignment_8_2_4; }
		
		//[Atributo]
		public CrossReference getAtributoAtributoCrossReference_8_2_4_0() { return cAtributoAtributoCrossReference_8_2_4_0; }
		
		//ID
		public RuleCall getAtributoAtributoIDTerminalRuleCall_8_2_4_0_1() { return cAtributoAtributoIDTerminalRuleCall_8_2_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MapNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.MapName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMetodoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetodoMetodoCrossReference_1_0 = (CrossReference)cMetodoAssignment_1.eContents().get(0);
		private final RuleCall cMetodoMetodoIDTerminalRuleCall_1_0_1 = (RuleCall)cMetodoMetodoCrossReference_1_0.eContents().get(1);
		private final RuleCall cPUNTOTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParamPathParamCrossReference_3_0 = (CrossReference)cParamAssignment_3.eContents().get(0);
		private final RuleCall cParamPathParamIDTerminalRuleCall_3_0_1 = (RuleCall)cParamPathParamCrossReference_3_0.eContents().get(1);
		
		//MapName:
		//	{MapName} metodo=[Metodo] PUNTO param=[PathParam];
		@Override public ParserRule getRule() { return rule; }
		
		//{MapName} metodo=[Metodo] PUNTO param=[PathParam]
		public Group getGroup() { return cGroup; }
		
		//{MapName}
		public Action getMapNameAction_0() { return cMapNameAction_0; }
		
		//metodo=[Metodo]
		public Assignment getMetodoAssignment_1() { return cMetodoAssignment_1; }
		
		//[Metodo]
		public CrossReference getMetodoMetodoCrossReference_1_0() { return cMetodoMetodoCrossReference_1_0; }
		
		//ID
		public RuleCall getMetodoMetodoIDTerminalRuleCall_1_0_1() { return cMetodoMetodoIDTerminalRuleCall_1_0_1; }
		
		//PUNTO
		public RuleCall getPUNTOTerminalRuleCall_2() { return cPUNTOTerminalRuleCall_2; }
		
		//param=[PathParam]
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }
		
		//[PathParam]
		public CrossReference getParamPathParamCrossReference_3_0() { return cParamPathParamCrossReference_3_0; }
		
		//ID
		public RuleCall getParamPathParamIDTerminalRuleCall_3_0_1() { return cParamPathParamIDTerminalRuleCall_3_0_1; }
	}
	public class MetodoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Metodo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGETParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPUTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPOSTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDELETEParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Metodo:
		//	GET | PUT | POST | DELETE;
		@Override public ParserRule getRule() { return rule; }
		
		//GET | PUT | POST | DELETE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GET
		public RuleCall getGETParserRuleCall_0() { return cGETParserRuleCall_0; }
		
		//PUT
		public RuleCall getPUTParserRuleCall_1() { return cPUTParserRuleCall_1; }
		
		//POST
		public RuleCall getPOSTParserRuleCall_2() { return cPOSTParserRuleCall_2; }
		
		//DELETE
		public RuleCall getDELETEParserRuleCall_3() { return cDELETEParserRuleCall_3; }
	}
	public class DELETEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.DELETE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDELETEAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDELETEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cURLKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIGUALTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cPathAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPathURLParserRuleCall_6_0 = (RuleCall)cPathAssignment_6.eContents().get(0);
		private final RuleCall cPUNTOCOMATerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cResponseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cResponseResponseParserRuleCall_8_0 = (RuleCall)cResponseAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DELETE:
		//	{DELETE}
		//	'DELETE' name=ID '{'
		//	'URL' IGUAL path=URL PUNTOCOMA
		//	response=Response
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DELETE} 'DELETE' name=ID '{' 'URL' IGUAL path=URL PUNTOCOMA response=Response '}'
		public Group getGroup() { return cGroup; }
		
		//{DELETE}
		public Action getDELETEAction_0() { return cDELETEAction_0; }
		
		//'DELETE'
		public Keyword getDELETEKeyword_1() { return cDELETEKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'URL'
		public Keyword getURLKeyword_4() { return cURLKeyword_4; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_5() { return cIGUALTerminalRuleCall_5; }
		
		//path=URL
		public Assignment getPathAssignment_6() { return cPathAssignment_6; }
		
		//URL
		public RuleCall getPathURLParserRuleCall_6_0() { return cPathURLParserRuleCall_6_0; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_7() { return cPUNTOCOMATerminalRuleCall_7; }
		
		//response=Response
		public Assignment getResponseAssignment_8() { return cResponseAssignment_8; }
		
		//Response
		public RuleCall getResponseResponseParserRuleCall_8_0() { return cResponseResponseParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class POSTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.POST");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPOSTAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPOSTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cURLKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIGUALTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cPathAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPathURLParserRuleCall_6_0 = (RuleCall)cPathAssignment_6.eContents().get(0);
		private final RuleCall cPUNTOCOMATerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cRequestAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRequestRequestParserRuleCall_8_0 = (RuleCall)cRequestAssignment_8.eContents().get(0);
		private final Assignment cResponseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cResponseResponseParserRuleCall_9_0 = (RuleCall)cResponseAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//POST:
		//	{POST}
		//	'POST' name=ID '{'
		//	'URL' IGUAL path=URL PUNTOCOMA
		//	request=Request
		//	response=Response
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{POST} 'POST' name=ID '{' 'URL' IGUAL path=URL PUNTOCOMA request=Request response=Response '}'
		public Group getGroup() { return cGroup; }
		
		//{POST}
		public Action getPOSTAction_0() { return cPOSTAction_0; }
		
		//'POST'
		public Keyword getPOSTKeyword_1() { return cPOSTKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'URL'
		public Keyword getURLKeyword_4() { return cURLKeyword_4; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_5() { return cIGUALTerminalRuleCall_5; }
		
		//path=URL
		public Assignment getPathAssignment_6() { return cPathAssignment_6; }
		
		//URL
		public RuleCall getPathURLParserRuleCall_6_0() { return cPathURLParserRuleCall_6_0; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_7() { return cPUNTOCOMATerminalRuleCall_7; }
		
		//request=Request
		public Assignment getRequestAssignment_8() { return cRequestAssignment_8; }
		
		//Request
		public RuleCall getRequestRequestParserRuleCall_8_0() { return cRequestRequestParserRuleCall_8_0; }
		
		//response=Response
		public Assignment getResponseAssignment_9() { return cResponseAssignment_9; }
		
		//Response
		public RuleCall getResponseResponseParserRuleCall_9_0() { return cResponseResponseParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class PUTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.PUT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPUTAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cURLKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIGUALTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cPathAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPathURLParserRuleCall_6_0 = (RuleCall)cPathAssignment_6.eContents().get(0);
		private final RuleCall cPUNTOCOMATerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cRequestAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRequestRequestParserRuleCall_8_0 = (RuleCall)cRequestAssignment_8.eContents().get(0);
		private final Assignment cResponseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cResponseResponseParserRuleCall_9_0 = (RuleCall)cResponseAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PUT:
		//	{PUT}
		//	'PUT' name=ID '{'
		//	'URL' IGUAL path=URL PUNTOCOMA
		//	request=Request
		//	response=Response
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PUT} 'PUT' name=ID '{' 'URL' IGUAL path=URL PUNTOCOMA request=Request response=Response '}'
		public Group getGroup() { return cGroup; }
		
		//{PUT}
		public Action getPUTAction_0() { return cPUTAction_0; }
		
		//'PUT'
		public Keyword getPUTKeyword_1() { return cPUTKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'URL'
		public Keyword getURLKeyword_4() { return cURLKeyword_4; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_5() { return cIGUALTerminalRuleCall_5; }
		
		//path=URL
		public Assignment getPathAssignment_6() { return cPathAssignment_6; }
		
		//URL
		public RuleCall getPathURLParserRuleCall_6_0() { return cPathURLParserRuleCall_6_0; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_7() { return cPUNTOCOMATerminalRuleCall_7; }
		
		//request=Request
		public Assignment getRequestAssignment_8() { return cRequestAssignment_8; }
		
		//Request
		public RuleCall getRequestRequestParserRuleCall_8_0() { return cRequestRequestParserRuleCall_8_0; }
		
		//response=Response
		public Assignment getResponseAssignment_9() { return cResponseAssignment_9; }
		
		//Response
		public RuleCall getResponseResponseParserRuleCall_9_0() { return cResponseResponseParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class GETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.GET");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGETAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGETKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cURLKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIGUALTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cPathAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPathURLParserRuleCall_6_0 = (RuleCall)cPathAssignment_6.eContents().get(0);
		private final RuleCall cPUNTOCOMATerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cResponseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cResponseResponseParserRuleCall_8_0 = (RuleCall)cResponseAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//GET:
		//	{GET}
		//	'GET' name=ID '{'
		//	'URL' IGUAL path=URL PUNTOCOMA
		//	response=Response
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GET} 'GET' name=ID '{' 'URL' IGUAL path=URL PUNTOCOMA response=Response '}'
		public Group getGroup() { return cGroup; }
		
		//{GET}
		public Action getGETAction_0() { return cGETAction_0; }
		
		//'GET'
		public Keyword getGETKeyword_1() { return cGETKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'URL'
		public Keyword getURLKeyword_4() { return cURLKeyword_4; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_5() { return cIGUALTerminalRuleCall_5; }
		
		//path=URL
		public Assignment getPathAssignment_6() { return cPathAssignment_6; }
		
		//URL
		public RuleCall getPathURLParserRuleCall_6_0() { return cPathURLParserRuleCall_6_0; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_7() { return cPUNTOCOMATerminalRuleCall_7; }
		
		//response=Response
		public Assignment getResponseAssignment_8() { return cResponseAssignment_8; }
		
		//Response
		public RuleCall getResponseResponseParserRuleCall_8_0() { return cResponseResponseParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Response");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResponseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cResponseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIGUALTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cTipoResponseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTipoResponseTipoElementoParserRuleCall_5_0 = (RuleCall)cTipoResponseAssignment_5.eContents().get(0);
		private final Assignment cArrayAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_6_0 = (Keyword)cArrayAssignment_6.eContents().get(0);
		private final RuleCall cPUNTOCOMATerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Response:
		//	{Response}
		//	'Response' '{' 'Type' IGUAL tipoResponse=TipoElemento array?='[]'? PUNTOCOMA '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Response} 'Response' '{' 'Type' IGUAL tipoResponse=TipoElemento array?='[]'? PUNTOCOMA '}'
		public Group getGroup() { return cGroup; }
		
		//{Response}
		public Action getResponseAction_0() { return cResponseAction_0; }
		
		//'Response'
		public Keyword getResponseKeyword_1() { return cResponseKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_4() { return cIGUALTerminalRuleCall_4; }
		
		//tipoResponse=TipoElemento
		public Assignment getTipoResponseAssignment_5() { return cTipoResponseAssignment_5; }
		
		//TipoElemento
		public RuleCall getTipoResponseTipoElementoParserRuleCall_5_0() { return cTipoResponseTipoElementoParserRuleCall_5_0; }
		
		//array?='[]'?
		public Assignment getArrayAssignment_6() { return cArrayAssignment_6; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_6_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_6_0; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_7() { return cPUNTOCOMATerminalRuleCall_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIGUALTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cTipoResponseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTipoResponseTipoElementoParserRuleCall_5_0 = (RuleCall)cTipoResponseAssignment_5.eContents().get(0);
		private final Assignment cArrayAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_6_0 = (Keyword)cArrayAssignment_6.eContents().get(0);
		private final RuleCall cPUNTOCOMATerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Request:
		//	{Request}
		//	'Request' '{' 'Type' IGUAL tipoResponse=TipoElemento array?='[]'? PUNTOCOMA '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Request} 'Request' '{' 'Type' IGUAL tipoResponse=TipoElemento array?='[]'? PUNTOCOMA '}'
		public Group getGroup() { return cGroup; }
		
		//{Request}
		public Action getRequestAction_0() { return cRequestAction_0; }
		
		//'Request'
		public Keyword getRequestKeyword_1() { return cRequestKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_4() { return cIGUALTerminalRuleCall_4; }
		
		//tipoResponse=TipoElemento
		public Assignment getTipoResponseAssignment_5() { return cTipoResponseAssignment_5; }
		
		//TipoElemento
		public RuleCall getTipoResponseTipoElementoParserRuleCall_5_0() { return cTipoResponseTipoElementoParserRuleCall_5_0; }
		
		//array?='[]'?
		public Assignment getArrayAssignment_6() { return cArrayAssignment_6; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_6_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_6_0; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_7() { return cPUNTOCOMATerminalRuleCall_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.URL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cURLAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPathNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cPathNameParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cPathparamAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cPathparamPathParamParserRuleCall_2_1_0 = (RuleCall)cPathparamAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cQuestionMarkKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQueryparamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQueryparamQueryParamParserRuleCall_3_1_0 = (RuleCall)cQueryparamAssignment_3_1.eContents().get(0);
		
		//URL:
		//	{URL} PathName (PathName | pathparam+=PathParam)* ('?' queryparam=QueryParam)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{URL} PathName (PathName | pathparam+=PathParam)* ('?' queryparam=QueryParam)?
		public Group getGroup() { return cGroup; }
		
		//{URL}
		public Action getURLAction_0() { return cURLAction_0; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_1() { return cPathNameParserRuleCall_1; }
		
		//(PathName | pathparam+=PathParam)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_2_0() { return cPathNameParserRuleCall_2_0; }
		
		//pathparam+=PathParam
		public Assignment getPathparamAssignment_2_1() { return cPathparamAssignment_2_1; }
		
		//PathParam
		public RuleCall getPathparamPathParamParserRuleCall_2_1_0() { return cPathparamPathParamParserRuleCall_2_1_0; }
		
		//('?' queryparam=QueryParam)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_3_0() { return cQuestionMarkKeyword_3_0; }
		
		//queryparam=QueryParam
		public Assignment getQueryparamAssignment_3_1() { return cQueryparamAssignment_3_1; }
		
		//QueryParam
		public RuleCall getQueryparamQueryParamParserRuleCall_3_1_0() { return cQueryparamQueryParamParserRuleCall_3_1_0; }
	}
	public class PathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.PathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PathName:
		//	'/' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'/' ID
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PathParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.PathParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolidusColonLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PathParam:
		//	{PathParam}
		//	'/:{' name=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PathParam} '/:{' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//{PathParam}
		public Action getPathParamAction_0() { return cPathParamAction_0; }
		
		//'/:{'
		public Keyword getSolidusColonLeftCurlyBracketKeyword_1() { return cSolidusColonLeftCurlyBracketKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class QueryParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.QueryParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQueryParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//QueryParam:
		//	{QueryParam}
		//	'${' name=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{QueryParam} '${' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//{QueryParam}
		public Action getQueryParamAction_0() { return cQueryParamAction_0; }
		
		//'${'
		public Keyword getDollarSignLeftCurlyBracketKeyword_1() { return cDollarSignLeftCurlyBracketKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EntidadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Entidad");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntidadSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntidadMockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entidad:
		//	EntidadSimple | EntidadMock;
		@Override public ParserRule getRule() { return rule; }
		
		//EntidadSimple | EntidadMock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntidadSimple
		public RuleCall getEntidadSimpleParserRuleCall_0() { return cEntidadSimpleParserRuleCall_0; }
		
		//EntidadMock
		public RuleCall getEntidadMockParserRuleCall_1() { return cEntidadMockParserRuleCall_1; }
	}
	public class EntidadMockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.EntidadMock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntidadMockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAtributosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAtributosAtributoParserRuleCall_4_0 = (RuleCall)cAtributosAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EntidadMock:
		//	{EntidadMock}
		//	'Entity' name=ID '{' atributos+=Atributo* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EntidadMock} 'Entity' name=ID '{' atributos+=Atributo* '}'
		public Group getGroup() { return cGroup; }
		
		//{EntidadMock}
		public Action getEntidadMockAction_0() { return cEntidadMockAction_0; }
		
		//'Entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//atributos+=Atributo*
		public Assignment getAtributosAssignment_4() { return cAtributosAssignment_4; }
		
		//Atributo
		public RuleCall getAtributosAtributoParserRuleCall_4_0() { return cAtributosAtributoParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EntidadSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.EntidadSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntidadSimpleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSimpleEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAtributosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAtributosAtributoParserRuleCall_4_0 = (RuleCall)cAtributosAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EntidadSimple:
		//	{EntidadSimple}
		//	'SimpleEntity' name=ID '{' atributos+=Atributo* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EntidadSimple} 'SimpleEntity' name=ID '{' atributos+=Atributo* '}'
		public Group getGroup() { return cGroup; }
		
		//{EntidadSimple}
		public Action getEntidadSimpleAction_0() { return cEntidadSimpleAction_0; }
		
		//'SimpleEntity'
		public Keyword getSimpleEntityKeyword_1() { return cSimpleEntityKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//atributos+=Atributo*
		public Assignment getAtributosAssignment_4() { return cAtributosAssignment_4; }
		
		//Atributo
		public RuleCall getAtributosAtributoParserRuleCall_4_0() { return cAtributosAtributoParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AtributoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Atributo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtributoAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoElementoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cArrayAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cMocktypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMocktypeMockParserRuleCall_4_0 = (RuleCall)cMocktypeAssignment_4.eContents().get(0);
		private final RuleCall cPUNTOCOMATerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Atributo:
		//	{Atributo} tipo=TipoElemento array?='[]'? name=ID mocktype=Mock? PUNTOCOMA;
		@Override public ParserRule getRule() { return rule; }
		
		//{Atributo} tipo=TipoElemento array?='[]'? name=ID mocktype=Mock? PUNTOCOMA
		public Group getGroup() { return cGroup; }
		
		//{Atributo}
		public Action getAtributoAction_0() { return cAtributoAction_0; }
		
		//tipo=TipoElemento
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }
		
		//TipoElemento
		public RuleCall getTipoTipoElementoParserRuleCall_1_0() { return cTipoTipoElementoParserRuleCall_1_0; }
		
		//array?='[]'?
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_2_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//mocktype=Mock?
		public Assignment getMocktypeAssignment_4() { return cMocktypeAssignment_4; }
		
		//Mock
		public RuleCall getMocktypeMockParserRuleCall_4_0() { return cMocktypeMockParserRuleCall_4_0; }
		
		//PUNTOCOMA
		public RuleCall getPUNTOCOMATerminalRuleCall_5() { return cPUNTOCOMATerminalRuleCall_5; }
	}
	public class MockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.Mock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cPkAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cPkPKKeyword_2_0_0_0 = (Keyword)cPkAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final RuleCall cCOMATerminalRuleCall_2_0_1_0 = (RuleCall)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cMockTypeParserRuleCall_2_0_1_1 = (RuleCall)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cMockTypeParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Mock:
		//	{Mock}
		//	'(' (pk?='PK'? (COMA MockType)? | MockType) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mock} '(' (pk?='PK'? (COMA MockType)? | MockType) ')'
		public Group getGroup() { return cGroup; }
		
		//{Mock}
		public Action getMockAction_0() { return cMockAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//pk?='PK'? (COMA MockType)? | MockType
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//pk?='PK'? (COMA MockType)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//pk?='PK'?
		public Assignment getPkAssignment_2_0_0() { return cPkAssignment_2_0_0; }
		
		//'PK'
		public Keyword getPkPKKeyword_2_0_0_0() { return cPkPKKeyword_2_0_0_0; }
		
		//(COMA MockType)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//COMA
		public RuleCall getCOMATerminalRuleCall_2_0_1_0() { return cCOMATerminalRuleCall_2_0_1_0; }
		
		//MockType
		public RuleCall getMockTypeParserRuleCall_2_0_1_1() { return cMockTypeParserRuleCall_2_0_1_1; }
		
		//MockType
		public RuleCall getMockTypeParserRuleCall_2_1() { return cMockTypeParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MockTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.MockType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMockTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIGUALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTipoMockParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MockType:
		//	'mockType' IGUAL TipoMock;
		@Override public ParserRule getRule() { return rule; }
		
		//'mockType' IGUAL TipoMock
		public Group getGroup() { return cGroup; }
		
		//'mockType'
		public Keyword getMockTypeKeyword_0() { return cMockTypeKeyword_0; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_1() { return cIGUALTerminalRuleCall_1; }
		
		//TipoMock
		public RuleCall getTipoMockParserRuleCall_2() { return cTipoMockParserRuleCall_2; }
	}
	public class TipoMockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.TipoMock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFirstNameTypeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFirstNameMaleTypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLastNameTypeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFamilyNameTypeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFullNameTypeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGenderTypeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEmailAddressTypeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPhoneTypeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCountryTypeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCityTypeKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cCountryCodeTypeKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLatitudeTypeKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cLongitudeTypeKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cRowNumberTypeKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cBooleanTypeKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cFirstNameFemaleTypeKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		
		//TipoMock:
		//	'FirstNameType' | 'FirstNameMaleType' | 'LastNameType' | 'FamilyNameType' | 'FullNameType' | 'GenderType' |
		//	'EmailAddressType' | 'PhoneType' | 'CountryType' | 'CityType' | 'CountryCodeType' | 'LatitudeType' | 'LongitudeType' |
		//	'RowNumberType' | 'BooleanType' | 'FirstNameFemaleType';
		@Override public ParserRule getRule() { return rule; }
		
		//'FirstNameType' | 'FirstNameMaleType' | 'LastNameType' | 'FamilyNameType' | 'FullNameType' | 'GenderType' |
		//'EmailAddressType' | 'PhoneType' | 'CountryType' | 'CityType' | 'CountryCodeType' | 'LatitudeType' | 'LongitudeType' |
		//'RowNumberType' | 'BooleanType' | 'FirstNameFemaleType'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'FirstNameType'
		public Keyword getFirstNameTypeKeyword_0() { return cFirstNameTypeKeyword_0; }
		
		//'FirstNameMaleType'
		public Keyword getFirstNameMaleTypeKeyword_1() { return cFirstNameMaleTypeKeyword_1; }
		
		//'LastNameType'
		public Keyword getLastNameTypeKeyword_2() { return cLastNameTypeKeyword_2; }
		
		//'FamilyNameType'
		public Keyword getFamilyNameTypeKeyword_3() { return cFamilyNameTypeKeyword_3; }
		
		//'FullNameType'
		public Keyword getFullNameTypeKeyword_4() { return cFullNameTypeKeyword_4; }
		
		//'GenderType'
		public Keyword getGenderTypeKeyword_5() { return cGenderTypeKeyword_5; }
		
		//'EmailAddressType'
		public Keyword getEmailAddressTypeKeyword_6() { return cEmailAddressTypeKeyword_6; }
		
		//'PhoneType'
		public Keyword getPhoneTypeKeyword_7() { return cPhoneTypeKeyword_7; }
		
		//'CountryType'
		public Keyword getCountryTypeKeyword_8() { return cCountryTypeKeyword_8; }
		
		//'CityType'
		public Keyword getCityTypeKeyword_9() { return cCityTypeKeyword_9; }
		
		//'CountryCodeType'
		public Keyword getCountryCodeTypeKeyword_10() { return cCountryCodeTypeKeyword_10; }
		
		//'LatitudeType'
		public Keyword getLatitudeTypeKeyword_11() { return cLatitudeTypeKeyword_11; }
		
		//'LongitudeType'
		public Keyword getLongitudeTypeKeyword_12() { return cLongitudeTypeKeyword_12; }
		
		//'RowNumberType'
		public Keyword getRowNumberTypeKeyword_13() { return cRowNumberTypeKeyword_13; }
		
		//'BooleanType'
		public Keyword getBooleanTypeKeyword_14() { return cBooleanTypeKeyword_14; }
		
		//'FirstNameFemaleType'
		public Keyword getFirstNameFemaleTypeKeyword_15() { return cFirstNameFemaleTypeKeyword_15; }
	}
	public class TipoElementoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.TipoElemento");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTipoBasicoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTipoEntidadParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TipoElemento:
		//	TipoBasico | TipoEntidad;
		@Override public ParserRule getRule() { return rule; }
		
		//TipoBasico | TipoEntidad
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TipoBasico
		public RuleCall getTipoBasicoParserRuleCall_0() { return cTipoBasicoParserRuleCall_0; }
		
		//TipoEntidad
		public RuleCall getTipoEntidadParserRuleCall_1() { return cTipoEntidadParserRuleCall_1; }
	}
	public class TipoEntidadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.TipoEntidad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTipoEntidadAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntidadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntidadEntidadCrossReference_1_0 = (CrossReference)cEntidadAssignment_1.eContents().get(0);
		private final RuleCall cEntidadEntidadIDTerminalRuleCall_1_0_1 = (RuleCall)cEntidadEntidadCrossReference_1_0.eContents().get(1);
		
		//TipoEntidad:
		//	{TipoEntidad} entidad=[Entidad];
		@Override public ParserRule getRule() { return rule; }
		
		//{TipoEntidad} entidad=[Entidad]
		public Group getGroup() { return cGroup; }
		
		//{TipoEntidad}
		public Action getTipoEntidadAction_0() { return cTipoEntidadAction_0; }
		
		//entidad=[Entidad]
		public Assignment getEntidadAssignment_1() { return cEntidadAssignment_1; }
		
		//[Entidad]
		public CrossReference getEntidadEntidadCrossReference_1_0() { return cEntidadEntidadCrossReference_1_0; }
		
		//ID
		public RuleCall getEntidadEntidadIDTerminalRuleCall_1_0_1() { return cEntidadEntidadIDTerminalRuleCall_1_0_1; }
	}
	public class TipoBasicoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.TipoBasico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTipoBasicoAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameStringKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameIntKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameBooleanKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		
		//TipoBasico:
		//	{TipoBasico} name=('string' | 'int' | 'boolean');
		@Override public ParserRule getRule() { return rule; }
		
		//{TipoBasico} name=('string' | 'int' | 'boolean')
		public Group getGroup() { return cGroup; }
		
		//{TipoBasico}
		public Action getTipoBasicoAction_0() { return cTipoBasicoAction_0; }
		
		//name=('string' | 'int' | 'boolean')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//('string' | 'int' | 'boolean')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//'string'
		public Keyword getNameStringKeyword_1_0_0() { return cNameStringKeyword_1_0_0; }
		
		//'int'
		public Keyword getNameIntKeyword_1_0_1() { return cNameIntKeyword_1_0_1; }
		
		//'boolean'
		public Keyword getNameBooleanKeyword_1_0_2() { return cNameBooleanKeyword_1_0_2; }
	}
	
	
	private final ModelElements pModel;
	private final TestElements pTest;
	private final AssertionElements pAssertion;
	private final AssertResponseElements pAssertResponse;
	private final ComparacionElements pComparacion;
	private final ComparadorElements pComparador;
	private final MappingElements pMapping;
	private final MapElements pMap;
	private final MapNameElements pMapName;
	private final MetodoElements pMetodo;
	private final DELETEElements pDELETE;
	private final POSTElements pPOST;
	private final PUTElements pPUT;
	private final GETElements pGET;
	private final ResponseElements pResponse;
	private final RequestElements pRequest;
	private final URLElements pURL;
	private final PathNameElements pPathName;
	private final PathParamElements pPathParam;
	private final QueryParamElements pQueryParam;
	private final EntidadElements pEntidad;
	private final EntidadMockElements pEntidadMock;
	private final EntidadSimpleElements pEntidadSimple;
	private final AtributoElements pAtributo;
	private final MockElements pMock;
	private final MockTypeElements pMockType;
	private final TipoMockElements pTipoMock;
	private final TipoElementoElements pTipoElemento;
	private final TipoEntidadElements pTipoEntidad;
	private final TipoBasicoElements pTipoBasico;
	private final TerminalRule tIGUAL;
	private final TerminalRule tIGUALDAD;
	private final TerminalRule tMAYOR;
	private final TerminalRule tMENOR;
	private final TerminalRule tMAYORIGUAL;
	private final TerminalRule tMENORIGUAL;
	private final TerminalRule tPUNTOCOMA;
	private final TerminalRule tCOMA;
	private final TerminalRule tPUNTO;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RestGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTest = new TestElements();
		this.pAssertion = new AssertionElements();
		this.pAssertResponse = new AssertResponseElements();
		this.pComparacion = new ComparacionElements();
		this.pComparador = new ComparadorElements();
		this.pMapping = new MappingElements();
		this.pMap = new MapElements();
		this.pMapName = new MapNameElements();
		this.pMetodo = new MetodoElements();
		this.pDELETE = new DELETEElements();
		this.pPOST = new POSTElements();
		this.pPUT = new PUTElements();
		this.pGET = new GETElements();
		this.pResponse = new ResponseElements();
		this.pRequest = new RequestElements();
		this.pURL = new URLElements();
		this.pPathName = new PathNameElements();
		this.pPathParam = new PathParamElements();
		this.pQueryParam = new QueryParamElements();
		this.pEntidad = new EntidadElements();
		this.pEntidadMock = new EntidadMockElements();
		this.pEntidadSimple = new EntidadSimpleElements();
		this.pAtributo = new AtributoElements();
		this.pMock = new MockElements();
		this.pMockType = new MockTypeElements();
		this.pTipoMock = new TipoMockElements();
		this.pTipoElemento = new TipoElementoElements();
		this.pTipoEntidad = new TipoEntidadElements();
		this.pTipoBasico = new TipoBasicoElements();
		this.tIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.IGUAL");
		this.tIGUALDAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.IGUALDAD");
		this.tMAYOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.MAYOR");
		this.tMENOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.MENOR");
		this.tMAYORIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.MAYORIGUAL");
		this.tMENORIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.MENORIGUAL");
		this.tPUNTOCOMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.PUNTOCOMA");
		this.tCOMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.COMA");
		this.tPUNTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Rest.PUNTO");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Rest".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'apiURL' IGUAL STRING PUNTOCOMA
	//	entidades+=Entidad+
	//	metodos+=Metodo+
	//	tests+=Test+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Test:
	//	{Test}
	//	'Test' name=ID '{'
	//	'service' IGUAL service=[Metodo] PUNTOCOMA
	//	'description' IGUAL STRING PUNTOCOMA
	//	mapping=Mapping?
	//	assertion=Assertion
	//	'}';
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//Assertion:
	//	{Assertion}
	//	'Assertions' '{'
	//	'response.status' IGUALDAD INT PUNTOCOMA
	//	assertResponse+=AssertResponse*
	//	'}';
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//AssertResponse:
	//	{AssertResponse}
	//	'response' (Comparador (INT | STRING) | '->' comparacion=Comparacion) PUNTOCOMA;
	public AssertResponseElements getAssertResponseAccess() {
		return pAssertResponse;
	}
	
	public ParserRule getAssertResponseRule() {
		return getAssertResponseAccess().getRule();
	}
	
	//Comparacion:
	//	{Comparacion} entidad=[Entidad] PUNTO atributo=[Atributo] Comparador (INT | STRING | 'parameter.' metodo=[Metodo]
	//	PUNTO param=[PathParam]);
	public ComparacionElements getComparacionAccess() {
		return pComparacion;
	}
	
	public ParserRule getComparacionRule() {
		return getComparacionAccess().getRule();
	}
	
	//Comparador:
	//	IGUALDAD | MAYOR | MENOR | MAYORIGUAL | MENORIGUAL;
	public ComparadorElements getComparadorAccess() {
		return pComparador;
	}
	
	public ParserRule getComparadorRule() {
		return getComparadorAccess().getRule();
	}
	
	//Mapping:
	//	{Mapping}
	//	'Mapping' '['
	//	maps+=Map+
	//	']';
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//Map:
	//	{Map}
	//	'{' 'parameter' IGUAL name=MapName COMA 'value' IGUAL (STRING | INT | 'request' '->' entidadMap=[Entidad] PUNTO
	//	atributo=[Atributo]) '}';
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//MapName:
	//	{MapName} metodo=[Metodo] PUNTO param=[PathParam];
	public MapNameElements getMapNameAccess() {
		return pMapName;
	}
	
	public ParserRule getMapNameRule() {
		return getMapNameAccess().getRule();
	}
	
	//Metodo:
	//	GET | PUT | POST | DELETE;
	public MetodoElements getMetodoAccess() {
		return pMetodo;
	}
	
	public ParserRule getMetodoRule() {
		return getMetodoAccess().getRule();
	}
	
	//DELETE:
	//	{DELETE}
	//	'DELETE' name=ID '{'
	//	'URL' IGUAL path=URL PUNTOCOMA
	//	response=Response
	//	'}';
	public DELETEElements getDELETEAccess() {
		return pDELETE;
	}
	
	public ParserRule getDELETERule() {
		return getDELETEAccess().getRule();
	}
	
	//POST:
	//	{POST}
	//	'POST' name=ID '{'
	//	'URL' IGUAL path=URL PUNTOCOMA
	//	request=Request
	//	response=Response
	//	'}';
	public POSTElements getPOSTAccess() {
		return pPOST;
	}
	
	public ParserRule getPOSTRule() {
		return getPOSTAccess().getRule();
	}
	
	//PUT:
	//	{PUT}
	//	'PUT' name=ID '{'
	//	'URL' IGUAL path=URL PUNTOCOMA
	//	request=Request
	//	response=Response
	//	'}';
	public PUTElements getPUTAccess() {
		return pPUT;
	}
	
	public ParserRule getPUTRule() {
		return getPUTAccess().getRule();
	}
	
	//GET:
	//	{GET}
	//	'GET' name=ID '{'
	//	'URL' IGUAL path=URL PUNTOCOMA
	//	response=Response
	//	'}';
	public GETElements getGETAccess() {
		return pGET;
	}
	
	public ParserRule getGETRule() {
		return getGETAccess().getRule();
	}
	
	//Response:
	//	{Response}
	//	'Response' '{' 'Type' IGUAL tipoResponse=TipoElemento array?='[]'? PUNTOCOMA '}';
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}
	
	//Request:
	//	{Request}
	//	'Request' '{' 'Type' IGUAL tipoResponse=TipoElemento array?='[]'? PUNTOCOMA '}';
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}
	
	//URL:
	//	{URL} PathName (PathName | pathparam+=PathParam)* ('?' queryparam=QueryParam)?;
	public URLElements getURLAccess() {
		return pURL;
	}
	
	public ParserRule getURLRule() {
		return getURLAccess().getRule();
	}
	
	//PathName:
	//	'/' ID;
	public PathNameElements getPathNameAccess() {
		return pPathName;
	}
	
	public ParserRule getPathNameRule() {
		return getPathNameAccess().getRule();
	}
	
	//PathParam:
	//	{PathParam}
	//	'/:{' name=ID '}';
	public PathParamElements getPathParamAccess() {
		return pPathParam;
	}
	
	public ParserRule getPathParamRule() {
		return getPathParamAccess().getRule();
	}
	
	//QueryParam:
	//	{QueryParam}
	//	'${' name=ID '}';
	public QueryParamElements getQueryParamAccess() {
		return pQueryParam;
	}
	
	public ParserRule getQueryParamRule() {
		return getQueryParamAccess().getRule();
	}
	
	//Entidad:
	//	EntidadSimple | EntidadMock;
	public EntidadElements getEntidadAccess() {
		return pEntidad;
	}
	
	public ParserRule getEntidadRule() {
		return getEntidadAccess().getRule();
	}
	
	//EntidadMock:
	//	{EntidadMock}
	//	'Entity' name=ID '{' atributos+=Atributo* '}';
	public EntidadMockElements getEntidadMockAccess() {
		return pEntidadMock;
	}
	
	public ParserRule getEntidadMockRule() {
		return getEntidadMockAccess().getRule();
	}
	
	//EntidadSimple:
	//	{EntidadSimple}
	//	'SimpleEntity' name=ID '{' atributos+=Atributo* '}';
	public EntidadSimpleElements getEntidadSimpleAccess() {
		return pEntidadSimple;
	}
	
	public ParserRule getEntidadSimpleRule() {
		return getEntidadSimpleAccess().getRule();
	}
	
	//Atributo:
	//	{Atributo} tipo=TipoElemento array?='[]'? name=ID mocktype=Mock? PUNTOCOMA;
	public AtributoElements getAtributoAccess() {
		return pAtributo;
	}
	
	public ParserRule getAtributoRule() {
		return getAtributoAccess().getRule();
	}
	
	//Mock:
	//	{Mock}
	//	'(' (pk?='PK'? (COMA MockType)? | MockType) ')';
	public MockElements getMockAccess() {
		return pMock;
	}
	
	public ParserRule getMockRule() {
		return getMockAccess().getRule();
	}
	
	//MockType:
	//	'mockType' IGUAL TipoMock;
	public MockTypeElements getMockTypeAccess() {
		return pMockType;
	}
	
	public ParserRule getMockTypeRule() {
		return getMockTypeAccess().getRule();
	}
	
	//TipoMock:
	//	'FirstNameType' | 'FirstNameMaleType' | 'LastNameType' | 'FamilyNameType' | 'FullNameType' | 'GenderType' |
	//	'EmailAddressType' | 'PhoneType' | 'CountryType' | 'CityType' | 'CountryCodeType' | 'LatitudeType' | 'LongitudeType' |
	//	'RowNumberType' | 'BooleanType' | 'FirstNameFemaleType';
	public TipoMockElements getTipoMockAccess() {
		return pTipoMock;
	}
	
	public ParserRule getTipoMockRule() {
		return getTipoMockAccess().getRule();
	}
	
	//TipoElemento:
	//	TipoBasico | TipoEntidad;
	public TipoElementoElements getTipoElementoAccess() {
		return pTipoElemento;
	}
	
	public ParserRule getTipoElementoRule() {
		return getTipoElementoAccess().getRule();
	}
	
	//TipoEntidad:
	//	{TipoEntidad} entidad=[Entidad];
	public TipoEntidadElements getTipoEntidadAccess() {
		return pTipoEntidad;
	}
	
	public ParserRule getTipoEntidadRule() {
		return getTipoEntidadAccess().getRule();
	}
	
	//TipoBasico:
	//	{TipoBasico} name=('string' | 'int' | 'boolean');
	public TipoBasicoElements getTipoBasicoAccess() {
		return pTipoBasico;
	}
	
	public ParserRule getTipoBasicoRule() {
		return getTipoBasicoAccess().getRule();
	}
	
	//terminal IGUAL:
	//	'=';
	public TerminalRule getIGUALRule() {
		return tIGUAL;
	}
	
	//terminal IGUALDAD:
	//	'==';
	public TerminalRule getIGUALDADRule() {
		return tIGUALDAD;
	}
	
	//terminal MAYOR:
	//	'>';
	public TerminalRule getMAYORRule() {
		return tMAYOR;
	}
	
	//terminal MENOR:
	//	'<';
	public TerminalRule getMENORRule() {
		return tMENOR;
	}
	
	//terminal MAYORIGUAL:
	//	'>=';
	public TerminalRule getMAYORIGUALRule() {
		return tMAYORIGUAL;
	}
	
	//terminal MENORIGUAL:
	//	'<=';
	public TerminalRule getMENORIGUALRule() {
		return tMENORIGUAL;
	}
	
	//terminal PUNTOCOMA:
	//	';';
	public TerminalRule getPUNTOCOMARule() {
		return tPUNTOCOMA;
	}
	
	//terminal COMA:
	//	',';
	public TerminalRule getCOMARule() {
		return tCOMA;
	}
	
	//terminal PUNTO:
	//	'.';
	public TerminalRule getPUNTORule() {
		return tPUNTO;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
