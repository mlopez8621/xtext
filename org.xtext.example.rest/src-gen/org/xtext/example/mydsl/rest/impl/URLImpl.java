/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.rest.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.rest.PathParam;
import org.xtext.example.mydsl.rest.QueryParam;
import org.xtext.example.mydsl.rest.RestPackage;
import org.xtext.example.mydsl.rest.URL;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>URL</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.rest.impl.URLImpl#getPathparam <em>Pathparam</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.rest.impl.URLImpl#getQueryparam <em>Queryparam</em>}</li>
 * </ul>
 *
 * @generated
 */
public class URLImpl extends MinimalEObjectImpl.Container implements URL
{
  /**
   * The cached value of the '{@link #getPathparam() <em>Pathparam</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathparam()
   * @generated
   * @ordered
   */
  protected EList<PathParam> pathparam;

  /**
   * The cached value of the '{@link #getQueryparam() <em>Queryparam</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQueryparam()
   * @generated
   * @ordered
   */
  protected QueryParam queryparam;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected URLImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RestPackage.Literals.URL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PathParam> getPathparam()
  {
    if (pathparam == null)
    {
      pathparam = new EObjectContainmentEList<PathParam>(PathParam.class, this, RestPackage.URL__PATHPARAM);
    }
    return pathparam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryParam getQueryparam()
  {
    return queryparam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQueryparam(QueryParam newQueryparam, NotificationChain msgs)
  {
    QueryParam oldQueryparam = queryparam;
    queryparam = newQueryparam;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RestPackage.URL__QUERYPARAM, oldQueryparam, newQueryparam);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQueryparam(QueryParam newQueryparam)
  {
    if (newQueryparam != queryparam)
    {
      NotificationChain msgs = null;
      if (queryparam != null)
        msgs = ((InternalEObject)queryparam).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RestPackage.URL__QUERYPARAM, null, msgs);
      if (newQueryparam != null)
        msgs = ((InternalEObject)newQueryparam).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RestPackage.URL__QUERYPARAM, null, msgs);
      msgs = basicSetQueryparam(newQueryparam, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RestPackage.URL__QUERYPARAM, newQueryparam, newQueryparam));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RestPackage.URL__PATHPARAM:
        return ((InternalEList<?>)getPathparam()).basicRemove(otherEnd, msgs);
      case RestPackage.URL__QUERYPARAM:
        return basicSetQueryparam(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RestPackage.URL__PATHPARAM:
        return getPathparam();
      case RestPackage.URL__QUERYPARAM:
        return getQueryparam();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RestPackage.URL__PATHPARAM:
        getPathparam().clear();
        getPathparam().addAll((Collection<? extends PathParam>)newValue);
        return;
      case RestPackage.URL__QUERYPARAM:
        setQueryparam((QueryParam)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RestPackage.URL__PATHPARAM:
        getPathparam().clear();
        return;
      case RestPackage.URL__QUERYPARAM:
        setQueryparam((QueryParam)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RestPackage.URL__PATHPARAM:
        return pathparam != null && !pathparam.isEmpty();
      case RestPackage.URL__QUERYPARAM:
        return queryparam != null;
    }
    return super.eIsSet(featureID);
  }

} //URLImpl
