/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.RestGrammarAccess;

@SuppressWarnings("all")
public class RestSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RestGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AssertResponse_INTTerminalRuleCall_2_0_1_0_or_STRINGTerminalRuleCall_2_0_1_1;
	protected AbstractElementAlias match_Comparacion_INTTerminalRuleCall_5_0_or_STRINGTerminalRuleCall_5_1;
	protected AbstractElementAlias match_Map_INTTerminalRuleCall_8_1_or_STRINGTerminalRuleCall_8_0;
	protected AbstractElementAlias match_Mock___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1__q;
	protected AbstractElementAlias match_Mock___MockTypeParserRuleCall_2_1_or___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1____q;
	protected AbstractElementAlias match_URL_PathNameParserRuleCall_2_0_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RestGrammarAccess) access;
		match_AssertResponse_INTTerminalRuleCall_2_0_1_0_or_STRINGTerminalRuleCall_2_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssertResponseAccess().getINTTerminalRuleCall_2_0_1_0()), new TokenAlias(false, false, grammarAccess.getAssertResponseAccess().getSTRINGTerminalRuleCall_2_0_1_1()));
		match_Comparacion_INTTerminalRuleCall_5_0_or_STRINGTerminalRuleCall_5_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getComparacionAccess().getINTTerminalRuleCall_5_0()), new TokenAlias(false, false, grammarAccess.getComparacionAccess().getSTRINGTerminalRuleCall_5_1()));
		match_Map_INTTerminalRuleCall_8_1_or_STRINGTerminalRuleCall_8_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMapAccess().getINTTerminalRuleCall_8_1()), new TokenAlias(false, false, grammarAccess.getMapAccess().getSTRINGTerminalRuleCall_8_0()));
		match_Mock___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMockAccess().getCOMATerminalRuleCall_2_0_1_0()), new TokenAlias(false, false, grammarAccess.getMockAccess().getMockTypeParserRuleCall_2_0_1_1()));
		match_Mock___MockTypeParserRuleCall_2_1_or___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getMockAccess().getCOMATerminalRuleCall_2_0_1_0()), new TokenAlias(false, false, grammarAccess.getMockAccess().getMockTypeParserRuleCall_2_0_1_1())), new TokenAlias(false, false, grammarAccess.getMockAccess().getMockTypeParserRuleCall_2_1()));
		match_URL_PathNameParserRuleCall_2_0_a = new TokenAlias(true, true, grammarAccess.getURLAccess().getPathNameParserRuleCall_2_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMARule())
			return getCOMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getComparadorRule())
			return getComparadorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIGUALRule())
			return getIGUALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIGUALDADRule())
			return getIGUALDADToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMockTypeRule())
			return getMockTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPUNTORule())
			return getPUNTOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPUNTOCOMARule())
			return getPUNTOCOMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPathNameRule())
			return getPathNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMA:',';
	 */
	protected String getCOMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * Comparador:
	 * 	(IGUALDAD | MAYOR | MENOR | MAYORIGUAL | MENORIGUAL)
	 * ;
	 */
	protected String getComparadorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "==";
	}
	
	/**
	 * terminal IGUAL: '=';
	 */
	protected String getIGUALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal IGUALDAD: '==';
	 */
	protected String getIGUALDADToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "==";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * MockType:
	 * 	'mockType' IGUAL TipoMock
	 * ;
	 */
	protected String getMockTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mockType=FirstNameType";
	}
	
	/**
	 * terminal PUNTO: '.';
	 */
	protected String getPUNTOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * terminal PUNTOCOMA: ';';
	 */
	protected String getPUNTOCOMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * PathName:
	 * 	('/'ID) 
	 * ;
	 */
	protected String getPathNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "/";
	}
	
	/**
	 * terminal STRING	: 
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AssertResponse_INTTerminalRuleCall_2_0_1_0_or_STRINGTerminalRuleCall_2_0_1_1.equals(syntax))
				emit_AssertResponse_INTTerminalRuleCall_2_0_1_0_or_STRINGTerminalRuleCall_2_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Comparacion_INTTerminalRuleCall_5_0_or_STRINGTerminalRuleCall_5_1.equals(syntax))
				emit_Comparacion_INTTerminalRuleCall_5_0_or_STRINGTerminalRuleCall_5_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Map_INTTerminalRuleCall_8_1_or_STRINGTerminalRuleCall_8_0.equals(syntax))
				emit_Map_INTTerminalRuleCall_8_1_or_STRINGTerminalRuleCall_8_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Mock___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1__q.equals(syntax))
				emit_Mock___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Mock___MockTypeParserRuleCall_2_1_or___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1____q.equals(syntax))
				emit_Mock___MockTypeParserRuleCall_2_1_or___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_URL_PathNameParserRuleCall_2_0_a.equals(syntax))
				emit_URL_PathNameParserRuleCall_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     INT | STRING
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'response' Comparador (ambiguity) PUNTOCOMA (rule start)
	 */
	protected void emit_AssertResponse_INTTerminalRuleCall_2_0_1_0_or_STRINGTerminalRuleCall_2_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT | STRING
	 *
	 * This ambiguous syntax occurs at:
	 *     atributo=[Atributo|ID] Comparador (ambiguity) (rule end)
	 */
	protected void emit_Comparacion_INTTerminalRuleCall_5_0_or_STRINGTerminalRuleCall_5_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     STRING | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     name=MapName COMA 'value' IGUAL (ambiguity) '}' (rule end)
	 */
	protected void emit_Map_INTTerminalRuleCall_8_1_or_STRINGTerminalRuleCall_8_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (COMA MockType)?
	 *
	 * This ambiguous syntax occurs at:
	 *     pk?='PK' (ambiguity) ')' (rule end)
	 */
	protected void emit_Mock___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ((COMA MockType) | MockType)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) ')' (rule start)
	 */
	protected void emit_Mock___MockTypeParserRuleCall_2_1_or___COMATerminalRuleCall_2_0_1_0_MockTypeParserRuleCall_2_0_1_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     PathName*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) PathName (ambiguity) '?' queryparam=QueryParam
	 *     (rule start) PathName (ambiguity) (rule start)
	 *     (rule start) PathName (ambiguity) pathparam+=PathParam
	 *     pathparam+=PathParam (ambiguity) '?' queryparam=QueryParam
	 *     pathparam+=PathParam (ambiguity) (rule end)
	 *     pathparam+=PathParam (ambiguity) pathparam+=PathParam
	 */
	protected void emit_URL_PathNameParserRuleCall_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
