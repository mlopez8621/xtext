/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.rest.AssertResponse;
import org.xtext.example.mydsl.rest.Assertion;
import org.xtext.example.mydsl.rest.Atributo;
import org.xtext.example.mydsl.rest.Comparacion;
import org.xtext.example.mydsl.rest.DELETE;
import org.xtext.example.mydsl.rest.EntidadMock;
import org.xtext.example.mydsl.rest.EntidadSimple;
import org.xtext.example.mydsl.rest.GET;
import org.xtext.example.mydsl.rest.Map;
import org.xtext.example.mydsl.rest.MapName;
import org.xtext.example.mydsl.rest.Mapping;
import org.xtext.example.mydsl.rest.Mock;
import org.xtext.example.mydsl.rest.Model;
import org.xtext.example.mydsl.rest.POST;
import org.xtext.example.mydsl.rest.PUT;
import org.xtext.example.mydsl.rest.PathParam;
import org.xtext.example.mydsl.rest.QueryParam;
import org.xtext.example.mydsl.rest.Request;
import org.xtext.example.mydsl.rest.Response;
import org.xtext.example.mydsl.rest.RestPackage;
import org.xtext.example.mydsl.rest.Test;
import org.xtext.example.mydsl.rest.TipoBasico;
import org.xtext.example.mydsl.rest.TipoEntidad;
import org.xtext.example.mydsl.rest.URL;
import org.xtext.example.mydsl.services.RestGrammarAccess;

@SuppressWarnings("all")
public class RestSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RestGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RestPackage.ASSERT_RESPONSE:
				sequence_AssertResponse(context, (AssertResponse) semanticObject); 
				return; 
			case RestPackage.ASSERTION:
				sequence_Assertion(context, (Assertion) semanticObject); 
				return; 
			case RestPackage.ATRIBUTO:
				sequence_Atributo(context, (Atributo) semanticObject); 
				return; 
			case RestPackage.COMPARACION:
				sequence_Comparacion(context, (Comparacion) semanticObject); 
				return; 
			case RestPackage.DELETE:
				sequence_DELETE(context, (DELETE) semanticObject); 
				return; 
			case RestPackage.ENTIDAD_MOCK:
				sequence_EntidadMock(context, (EntidadMock) semanticObject); 
				return; 
			case RestPackage.ENTIDAD_SIMPLE:
				sequence_EntidadSimple(context, (EntidadSimple) semanticObject); 
				return; 
			case RestPackage.GET:
				sequence_GET(context, (GET) semanticObject); 
				return; 
			case RestPackage.MAP:
				sequence_Map(context, (Map) semanticObject); 
				return; 
			case RestPackage.MAP_NAME:
				sequence_MapName(context, (MapName) semanticObject); 
				return; 
			case RestPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case RestPackage.MOCK:
				sequence_Mock(context, (Mock) semanticObject); 
				return; 
			case RestPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RestPackage.POST:
				sequence_POST(context, (POST) semanticObject); 
				return; 
			case RestPackage.PUT:
				sequence_PUT(context, (PUT) semanticObject); 
				return; 
			case RestPackage.PATH_PARAM:
				sequence_PathParam(context, (PathParam) semanticObject); 
				return; 
			case RestPackage.QUERY_PARAM:
				sequence_QueryParam(context, (QueryParam) semanticObject); 
				return; 
			case RestPackage.REQUEST:
				sequence_Request(context, (Request) semanticObject); 
				return; 
			case RestPackage.RESPONSE:
				sequence_Response(context, (Response) semanticObject); 
				return; 
			case RestPackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			case RestPackage.TIPO_BASICO:
				sequence_TipoBasico(context, (TipoBasico) semanticObject); 
				return; 
			case RestPackage.TIPO_ENTIDAD:
				sequence_TipoEntidad(context, (TipoEntidad) semanticObject); 
				return; 
			case RestPackage.URL:
				sequence_URL(context, (URL) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AssertResponse returns AssertResponse
	 *
	 * Constraint:
	 *     comparacion=Comparacion?
	 */
	protected void sequence_AssertResponse(ISerializationContext context, AssertResponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Assertion returns Assertion
	 *
	 * Constraint:
	 *     assertResponse+=AssertResponse*
	 */
	protected void sequence_Assertion(ISerializationContext context, Assertion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atributo returns Atributo
	 *
	 * Constraint:
	 *     (tipo=TipoElemento array?='[]'? name=ID mocktype=Mock?)
	 */
	protected void sequence_Atributo(ISerializationContext context, Atributo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comparacion returns Comparacion
	 *
	 * Constraint:
	 *     (entidad=[Entidad|ID] atributo=[Atributo|ID] (metodo=[Metodo|ID] param=[PathParam|ID])?)
	 */
	protected void sequence_Comparacion(ISerializationContext context, Comparacion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Metodo returns DELETE
	 *     DELETE returns DELETE
	 *
	 * Constraint:
	 *     (name=ID path=URL response=Response)
	 */
	protected void sequence_DELETE(ISerializationContext context, DELETE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__NAME));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__PATH));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__RESPONSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__RESPONSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDELETEAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDELETEAccess().getPathURLParserRuleCall_6_0(), semanticObject.getPath());
		feeder.accept(grammarAccess.getDELETEAccess().getResponseResponseParserRuleCall_8_0(), semanticObject.getResponse());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns EntidadMock
	 *     EntidadMock returns EntidadMock
	 *
	 * Constraint:
	 *     (name=ID atributos+=Atributo*)
	 */
	protected void sequence_EntidadMock(ISerializationContext context, EntidadMock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns EntidadSimple
	 *     EntidadSimple returns EntidadSimple
	 *
	 * Constraint:
	 *     (name=ID atributos+=Atributo*)
	 */
	protected void sequence_EntidadSimple(ISerializationContext context, EntidadSimple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Metodo returns GET
	 *     GET returns GET
	 *
	 * Constraint:
	 *     (name=ID path=URL response=Response)
	 */
	protected void sequence_GET(ISerializationContext context, GET semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__NAME));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__PATH));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__RESPONSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__RESPONSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGETAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGETAccess().getPathURLParserRuleCall_6_0(), semanticObject.getPath());
		feeder.accept(grammarAccess.getGETAccess().getResponseResponseParserRuleCall_8_0(), semanticObject.getResponse());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MapName returns MapName
	 *
	 * Constraint:
	 *     (metodo=[Metodo|ID] param=[PathParam|ID])
	 */
	protected void sequence_MapName(ISerializationContext context, MapName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.MAP_NAME__METODO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.MAP_NAME__METODO));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.MAP_NAME__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.MAP_NAME__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMapNameAccess().getMetodoMetodoIDTerminalRuleCall_1_0_1(), semanticObject.eGet(RestPackage.Literals.MAP_NAME__METODO, false));
		feeder.accept(grammarAccess.getMapNameAccess().getParamPathParamIDTerminalRuleCall_3_0_1(), semanticObject.eGet(RestPackage.Literals.MAP_NAME__PARAM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Map returns Map
	 *
	 * Constraint:
	 *     (name=MapName (entidadMap=[Entidad|ID] atributo=[Atributo|ID])?)
	 */
	protected void sequence_Map(ISerializationContext context, Map semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     maps+=Map+
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mock returns Mock
	 *
	 * Constraint:
	 *     pk?='PK'?
	 */
	protected void sequence_Mock(ISerializationContext context, Mock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (entidades+=Entidad+ metodos+=Metodo+ tests+=Test+)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Metodo returns POST
	 *     POST returns POST
	 *
	 * Constraint:
	 *     (name=ID path=URL request=Request response=Response)
	 */
	protected void sequence_POST(ISerializationContext context, POST semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__NAME));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__PATH));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.POST__REQUEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.POST__REQUEST));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__RESPONSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__RESPONSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPOSTAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPOSTAccess().getPathURLParserRuleCall_6_0(), semanticObject.getPath());
		feeder.accept(grammarAccess.getPOSTAccess().getRequestRequestParserRuleCall_8_0(), semanticObject.getRequest());
		feeder.accept(grammarAccess.getPOSTAccess().getResponseResponseParserRuleCall_9_0(), semanticObject.getResponse());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Metodo returns PUT
	 *     PUT returns PUT
	 *
	 * Constraint:
	 *     (name=ID path=URL request=Request response=Response)
	 */
	protected void sequence_PUT(ISerializationContext context, PUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__NAME));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__PATH));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.PUT__REQUEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.PUT__REQUEST));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.METODO__RESPONSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.METODO__RESPONSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPUTAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPUTAccess().getPathURLParserRuleCall_6_0(), semanticObject.getPath());
		feeder.accept(grammarAccess.getPUTAccess().getRequestRequestParserRuleCall_8_0(), semanticObject.getRequest());
		feeder.accept(grammarAccess.getPUTAccess().getResponseResponseParserRuleCall_9_0(), semanticObject.getResponse());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PathParam returns PathParam
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PathParam(ISerializationContext context, PathParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.PATH_PARAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.PATH_PARAM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPathParamAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QueryParam returns QueryParam
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_QueryParam(ISerializationContext context, QueryParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.QUERY_PARAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.QUERY_PARAM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryParamAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Request returns Request
	 *
	 * Constraint:
	 *     (tipoResponse=TipoElemento array?='[]'?)
	 */
	protected void sequence_Request(ISerializationContext context, Request semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Response returns Response
	 *
	 * Constraint:
	 *     (tipoResponse=TipoElemento array?='[]'?)
	 */
	protected void sequence_Response(ISerializationContext context, Response semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Test returns Test
	 *
	 * Constraint:
	 *     (name=ID service=[Metodo|ID] mapping=Mapping? assertion=Assertion)
	 */
	protected void sequence_Test(ISerializationContext context, Test semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TipoElemento returns TipoBasico
	 *     TipoBasico returns TipoBasico
	 *
	 * Constraint:
	 *     (name='string' | name='int' | name='boolean')
	 */
	protected void sequence_TipoBasico(ISerializationContext context, TipoBasico semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TipoElemento returns TipoEntidad
	 *     TipoEntidad returns TipoEntidad
	 *
	 * Constraint:
	 *     entidad=[Entidad|ID]
	 */
	protected void sequence_TipoEntidad(ISerializationContext context, TipoEntidad semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.TIPO_ENTIDAD__ENTIDAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.TIPO_ENTIDAD__ENTIDAD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTipoEntidadAccess().getEntidadEntidadIDTerminalRuleCall_1_0_1(), semanticObject.eGet(RestPackage.Literals.TIPO_ENTIDAD__ENTIDAD, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     URL returns URL
	 *
	 * Constraint:
	 *     (pathparam+=PathParam* queryparam=QueryParam?)
	 */
	protected void sequence_URL(ISerializationContext context, URL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
